Lab 2 Report
Andrew Whitaker, Phillip Park

1) The following source files have been updated for Lab 2
 defs.h
 proc.c
 proc.h
 syscall.c
 syscall.h
 sysproc.c
 user.h
 usys.S
 testlab2.c
 lab2_test.c

2) In our implementation, the highest priority is 31 and the lowest priority is 0.

lab2_test.c was the provided in the course materials but has been altered to also test scheduling measurement outputs.
  How to test: "./lab2_test.c"
  The original code said that the program worked if processes finished in order of their priority. This should be true
  in the case of this newer version, however, sometimes the processes get stuck performing an I/O task and don't 
  finish in quite the correct order. What one should look at is the wait time of each process as it finishes. High priority
  processes spend the least amount of time waiting in the queue and have high running time to total time ratios. This is
  evidence of the scheduler giving high priority processes many chances to run over lower priority processes.

  Sample output:


testlab2.c has two test cases: the first tests the aging process and the second tests inheritance of priority.
  Test 1 - Tests aging and starvation
  How to test: "./testlab2 1"
  In this test, we have five processes: three have high priority (10) and two have low priority (2). In the beginning, the three with 
  high priority should run many times (alternating since they all share same priority). But eventually the low priority processes
  get to interject every once in a while since their priority gets increased. Once the high priority processes finish, then the low 
  have full rein.

  Sample output:

  Test 2 - Testing Inheritance and Donation
  How to test: "./testlab2 2"
  In this test, we have

  Sample output:


