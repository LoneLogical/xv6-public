Lab 2 Report
Andrew Whitaker, Phillip Park

1) The following source files have been updated for Lab 2
 defs.h
 proc.c
 proc.h
 syscall.c
 syscall.h
 sysproc.c
 user.h
 usys.S
 testlab2.c
 lab2_test.c

2) In our implementation, the highest priority is 31 and the lowest priority is 0.

  lab2_test.c was the provided in the course materials but has been altered to also test scheduling measurement outputs.
  How to test: "./lab2_test.c"
  The original code said that the program worked if processes finished in order of their priority. This should be true
  in the case of this newer version, however, sometimes the processes get stuck performing an I/O task and don't 
  finish in quite the correct order. What one should look at is the wait time of each process as it finishes. High priority
  processes spend the least amount of time waiting in the queue and have high running time to total time ratios. This is
  evidence of the scheduler giving high priority processes many chances to run over lower priority processes.

  Sample output:
    Step 2: testing the priority scheduler and setpriority(int priority)) systema call:
    Step 2: Assuming that the priorities range between range between 0 to 31
    Step 2: 0 is the lowest priority. All processes have a default priority of 10
    Step 2: The parent processes will switch to priority 0
    Hello! this is child# 36 and I will change my priority to 10 
    Hello! this is child# 35 and I will change my priority to 0 
    Hello! this is child# 37 and I will change my priority to 20 
    child# 37 with priority 20 has finished! 

    Time Stats for process #37 
    -- TotalTime: 118 
    -- WaitTime: 1 
    -- RunningTime: 117 

    This is the parent: child with PID# 37 has finished with status 0 

    child# 35 with priority 0 has finished! 
    Time Stats for process #35 
    -- TotalTime: 309 
    -- WaitTime: 188 
    -- RunningTime: 122 

    This is the parent: child with PID# 35 has finished with status 0 

    child# 36 with priority 10 has finished! 
    Time Stats for process #36 
     -- TotalTime: 734 
     -- WaitTime: 17 
     -- RunningTime: 717 

     This is the parent: child with PID# 36 has finished with status 0 

     if processes with highest priority finished first then its correct 


testlab2.c has two test cases: the first tests the aging process and the second tests inheritance of priority.
  Test 1 - Tests aging and starvation
  How to test: "./testlab2 1"
  In this test, we have five processes: three have high priority (10) and two have low priority (2). In the beginning, the three with 
  high priority should run many times (alternating since they all share same priority). But eventually the low priority processes
  get to interject every once in a while since their priority gets increased. Once the high priority processes finish, then the low 
  have full rein.

  Sample output:
	Process #0: j=35
	Process #2: j=31
	Process #0: j=36
	Process #2: j=32
	Process #3: j=4
	Process #0: j=37
	Process #2: j=33
	Process #0: j=38
	Process #1: j=39
	Process #2: j=34
	Process #1: j=40
	Process #2: j=35
	Process #1: j=41
	Process #2: j=36
	Process #4: j=5

  Test 2 - test Inheritance
  How to test: "./testlab2 2"

  Sample output:
	//parent's priority will increment 1 with each iteration, as it spawns a new child process

	parent pid: 11
	running pid 11 after fork
	parent running with highest priority 10
	running pid 11 after fork
	parent running with highest priority 11
	running pid 11 after fork
	parent running with highest priority 12
	running pid 11 after fork
	parent running with highest priority 13
	running pid 11 after fork
	parent running with highest priority 14

	//parent (with highest priority of 14) is now done, and will wait

	running pid 13 after fork
	child inherited parents priority: 14 , and is now scheduled

	running pid 15 after fork
	child inherited parents priority: 14 , and is now scheduled

	running pid 12 after fork
	child inherited parents priority: 14 , and is now scheduled

	running pid 14 after fork
	child inherited parents priority: 14 , and is now scheduled

	running pid 16 after fork
	child inherited parents priority: 14 , and is now scheduled


  Test 3 - testing Donation
  How to test: "./testlab2 3"

  Sample output:
	//default priority for new process from fork is 10
	parent's pid 9 
	parents's (# 9 ) priority before donate 25
	parent (# 9 ) resuming after donation
	child's (# 10) priority after donation 25

